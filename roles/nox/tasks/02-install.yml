- name: create nox system group
  ansible.builtin.group:
    name: "{{ nox_group }}"
    system: true
    state: present

- name: create nox system user
  ansible.builtin.user:
    name: "{{ nox_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ nox_group }}"
    create_home: false
    state: present

- name: cleanup nox state
  ansible.builtin.file:
    path: "{{ nox_dir }}/nox-{{ instance }}"
    state: absent
  when: nox_cleanup_state
  loop: "{{ nox_instances }}"
  loop_control:
    loop_var: instance
    label: "nox-{{ instance }}"

- name: create nox directories
  ansible.builtin.file:
    path: "{{ nox_dir }}/nox-{{ instance }}/state"
    state: directory
    owner: "{{ nox_user }}"
    group: "{{ nox_group }}"
    mode: 0755
  loop: "{{ nox_instances }}"
  loop_control:
    loop_var: instance
    label: "nox-{{ instance }}"

- name: download nox release to localhost
  become: false
  run_once: true
  delegate_to: localhost
  when: nox_run_id | string | length == 0
  block:
    - name: create files directory
      become: false
      run_once: true
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ role_path }}/files/nox/{{ _nox_version }}"
        state: directory
        mode: 0644

    - name: download nox release binary
      ansible.builtin.get_url:
        url: "{{ _nox_download_url }}/{{ _nox_bin }}"
        dest: "{{ role_path }}/files/nox/{{ _nox_version }}/{{ _nox_bin }}"
        checksum: "{{ _nox_checksums }}"
      register: _download_bin
      until: _download_bin is succeeded
      retries: 5
      delay: 2

    - name: propagate nox release binary
      become: true
      become_user: root
      run_once: false
      delegate_to: "{{ inventory_hostname }}"
      ansible.builtin.copy:
        src: "{{ role_path }}/files/nox/{{ _nox_version }}/{{ _nox_bin }}"
        dest: "{{ nox_dir }}/nox-{{ instance }}/nox"
        owner: "{{ nox_user }}"
        group: "{{ nox_group }}"
        mode: 0555
      loop: "{{ nox_instances }}"
      loop_control:
        loop_var: instance
        label: "nox-{{ instance }}"
      notify: restart nox
      register: _binary_release

- name: download nox snapshot to localhost
  become: false
  run_once: true
  delegate_to: localhost
  vars:
    github_token: "{{ lookup('env', 'GITHUB_TOKEN') }}"
  when: nox_run_id | string | length
  block:
    - name: get list of artifacts from GitHub API
      ansible.builtin.uri:
        url: "https://api.github.com/repos/fluencelabs/nox/actions/runs/{{ nox_run_id }}/artifacts"
        method: GET
        headers:
          Accept: "application/vnd.github.v3+json"
        return_content: true
      register: _artifacts_response

    - name: parse the artifact download URL
      ansible.builtin.set_fact:
        _artifact_download_url: "{{ item.archive_download_url }}"
      loop: "{{ _artifacts_response.json.artifacts }}"
      when: "item.name == _bin"
      loop_control:
        label: "{{ item.url }}"

    - name: create a temporary directory
      ansible.builtin.tempfile:
        state: directory
      register: _artifact_temp_dir

    - name: download the artifact
      ansible.builtin.get_url:
        url: "{{ _artifact_download_url }}"
        dest: "{{ _artifact_temp_dir.path }}/{{ _nox_bin }}.zip"
        headers:
          Authorization: "token {{ github_token }}"
      register: _download_artifact
      until: _download_artifact is succeeded
      retries: 5
      delay: 2

    - name: unarchive the downloaded artifact
      ansible.builtin.unarchive:
        src: "{{ _artifact_temp_dir.path }}/{{ _nox_bin }}.zip"
        dest: "{{ _artifact_temp_dir.path }}/"

    - name: propagate nox artifact binary
      become: true
      become_user: root
      run_once: false
      delegate_to: "{{ inventory_hostname }}"
      ansible.builtin.copy:
        src: "{{ _artifact_temp_dir.path }}/nox"
        dest: "{{ nox_dir }}/nox-{{ instance }}/nox"
        owner: "{{ nox_user }}"
        group: "{{ nox_group }}"
        mode: 0555
      loop: "{{ nox_instances }}"
      loop_control:
        loop_var: instance
        label: "nox-{{ instance }}"
      notify: restart nox
      register: _binary_snapshot

  always:
    - name: remove temporary directory
      ansible.builtin.file:
        path: "{{ _artifact_temp_dir.path }}"
        state: absent
      when: _artifact_temp_dir.path is defined

- name: copy nox config
  ansible.builtin.template:
    src: "files/{{ nox_project_dir }}/configs/nox-{{ instance }}_Config.toml"
    dest: "{{ nox_dir }}/nox-{{ instance }}/Config.toml"
    owner: "{{ nox_user }}"
    group: "{{ nox_group }}"
    mode: 0640
  loop: "{{ nox_instances }}"
  loop_control:
    loop_var: instance
    label: "nox-{{ instance }}"
  notify: restart nox
  register: _config

- name: copy nox secret
  ansible.builtin.template:
    src: "files/{{ nox_project_dir }}/secrets/nox-{{ instance }}.txt"
    dest: "{{ nox_dir }}/nox-{{ instance }}/state/root_secret_key.ed25519"
    owner: "{{ nox_user }}"
    group: "{{ nox_group }}"
    mode: 0600
  loop: "{{ nox_instances }}"
  loop_control:
    loop_var: instance
    label: "nox-{{ instance }}"
  notify: restart nox
  register: _secret

- name: create nox unit file
  ansible.builtin.copy:
    content: "{{ nox_unit_file }}"
    dest: "/etc/systemd/system/nox-@.service"
    owner: root
    group: root
    mode: 0755
  register: _systemd

- name: enable noxes
  ansible.builtin.systemd:
    name: nox-@{{ instance }}
    enabled: true
    daemon_reload: true
  loop: "{{ nox_instances }}"
  loop_control:
    loop_var: instance
    label: "nox-{{ instance }}"

- name: determine which instances to restart
  vars:
    _binary_release_changed: "{{ _binary_release.results | selectattr('changed', 'equalto', true) | map(attribute='instance') | list }}"
    _binary_snapshot_changed: "{{ _binary_snapshot.results | selectattr('changed', 'equalto', true) | map(attribute='instance') | list }}"
    _config_changed: "{{ _config.results | selectattr('changed', 'equalto', true) | map(attribute='instance') | list }}"
    _secret_changed: "{{ _secret.results | selectattr('changed', 'equalto', true) | map(attribute='instance') | list }}"
    _instances_changed: "{{ (_systemd is changed) | ternary(nox_instances, _binary_release_changed + _binary_snapshot_changed + _config_changed + _secret_changed) }}"
  ansible.builtin.set_fact:
    _instances_to_restart: "{{ (nox_instances | select('in', _instances_changed) | list) | unique }}"
