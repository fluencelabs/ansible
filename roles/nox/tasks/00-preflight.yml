- name: check that tar is GNU type # noqa
  tags: always
  fluencelabs.provider.check_tar_type:

- name: check that virtualization is enabled
  tags: always
  ansible.builtin.warn:
    msg: "CPU does not support virtualization or it is disabled in the BIOS/UEFI."
  when: "'vmx' not in ansible_processor_flags and 'svm' not in ansible_processor_flags"

- name: check "fluence_instance_id" variable
  tags: always
  ansible.builtin.assert:
    that:
      - fluence_instance_id is defined
      - fluence_instance_id is string
      - fluence_instance_id | length
    quiet: true

- name: check "nox_version" variable
  tags: always
  ansible.builtin.assert:
    that:
      - nox_version is defined
      - nox_version is string
      - nox_version | length
      - nox_version is regex(_semver_regex)
    quiet: true

- name: check "nox_user" variable
  tags: always
  ansible.builtin.assert:
    that:
      - nox_user is defined
      - nox_user is string
      - nox_user | length
    quiet: true

- name: check "nox_group" variable
  tags: always
  ansible.builtin.assert:
    that:
      - nox_group is defined
      - nox_group is string
      - nox_group | length
    quiet: true

- name: check "nox_dir" variable
  tags: always
  ansible.builtin.assert:
    that:
      - nox_dir is defined
      - nox_dir is string
      - nox_dir | length
    quiet: true

- name: check "nox_unit_file" variable
  tags: always
  ansible.builtin.assert:
    that:
      - nox_unit_file is defined
      - nox_unit_file is string
      - nox_unit_file | length
    quiet: true

- name: check "fluence_project_dir" variable
  tags: always
  ansible.builtin.assert:
    that:
      - fluence_project_dir is defined
      - fluence_project_dir is string
      - fluence_project_dir | length
    quiet: true

- name: gather stats about nox configs
  tags: always
  become: false
  delegate_to: localhost
  stat:
    path: "files/{{ fluence_project_dir }}/.fluence/configs/{{ fluence_instance_id }}_Config.toml"
  register: _config_stat

- name: check if config file exists
  tags: always
  vars:
    _config_path: "files/{{ fluence_project_dir }}/.fluence/configs/{{ fluence_instance_id }}_Config.toml"
  debug:
    msg: "Checking existence of {{ fluence_instance_id }} config at {{ _config_path }}"
  failed_when: not _config_stat.stat.exists
