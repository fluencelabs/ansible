- name: check and archive secrets directory if secrets changed
  run_once: true
  delegate_to: localhost
  nox_secrets_backup:
    directory: "files/{{ fluence_project_dir }}/.fluence/secrets/"
    hash_file: "{{ nox_local_backup_dir }}/hashes.json"
    backup_directory: "{{ nox_local_backup_dir }}"

- name: create nox system group
  ansible.builtin.group:
    name: "{{ nox_group }}"
    system: true
    state: present

- name: create nox system user
  ansible.builtin.user:
    name: "{{ nox_user }}"
    system: true
    shell: "/sbin/nologin"
    group: "{{ nox_group }}"
    groups:
      - libvirt
    create_home: false
    state: present

- name: add nox user to libvirt group
  ansible.builtin.user:
    name: "libvirt-qemu"
    groups:
      - "{{ nox_group }}"
    create_home: false
    state: present

- name: increase ulimits for nox user
  ansible.builtin.pam_limits:
  args: "{{ limit }}"
  loop_control:
    loop_var: "limit"
    label: "{{ limit.domain }} {{ limit.limit_item }}:{{ limit.limit_type }}"
  loop:
    - domain: "{{ nox_user }}"
      limit_type: "hard"
      limit_item: "nofile"
      comment: "Increse max open file hard limit"
      value: 65536
    - domain: "{{ nox_user }}"
      limit_type: "soft"
      limit_item: "nofile"
      comment: "Increse max open file soft limit"
      value: 65536

- name: cleanup nox state
  ansible.builtin.file:
    path: "{{ nox_dir }}"
    state: absent
  when: nox_cleanup_state

- name: cleanup VMs if any
  block:
    - name: List all VMs
      community.libvirt.virt:
        command: list_vms
      register: all_vms

    - debug:
        msg: "{{ item }}"
      loop: "{{ all_vms.list_vms }}"

    - name: "Destroy vm {{ item }}"
      community.libvirt.virt:
        name: "{{ item }}"
        command: destroy
      loop: "{{ all_vms.list_vms }}"

    - name: "Undefine vm {{ item }}"
      community.libvirt.virt:
        name: "{{ item }}"
        command: undefine
      loop: "{{ all_vms.list_vms }}"
  when: nox_cleanup_state

- name: create nox directories
  ansible.builtin.file:
    path: "{{ nox_dir }}/state"
    state: directory
    owner: "{{ nox_user }}"
    group: "{{ nox_group }}"
    mode: 0o755

- name: download nox release to localhost
  become: false
  run_once: true
  delegate_to: localhost
  when: nox_branch | string | length == 0
  block:
    - name: create files directory
      become: false
      run_once: true
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ role_path }}/files/nox/{{ _nox_version }}"
        state: directory
        mode: 0o755

    - name: download nox release binary
      ansible.builtin.get_url:
        url: "{{ _nox_download_url }}/{{ _nox_bin }}"
        dest: "{{ role_path }}/files/nox/{{ _nox_version }}/{{ _nox_bin }}"
        checksum: "{{ _nox_checksums }}"
      register: _download_bin
      until: _download_bin is succeeded
      retries: 5
      delay: 2

    - name: propagate nox release binary
      become: true
      become_user: root
      run_once: false
      delegate_to: "{{ inventory_hostname }}"
      ansible.builtin.copy:
        src: "{{ role_path }}/files/nox/{{ _nox_version }}/{{ _nox_bin }}"
        dest: "{{ nox_dir }}/nox"
        owner: "{{ nox_user }}"
        group: "{{ nox_group }}"
        mode: 0o555
      notify: restart nox

- name: download nox snapshot to localhost
  become: false
  run_once: true
  delegate_to: localhost
  when: nox_branch | string | length
  block:
    - name: create a temporary directory
      ansible.builtin.tempfile:
        state: directory
      register: _snapshot_temp_dir

    - name: download the snapshot
      vars:
        _snapshot_download_url: "https://fluence-artifacts.s3.eu-west-1.amazonaws.com/nox/snapshots/{{ nox_branch }}/{{ _nox_bin }}"
      ansible.builtin.get_url:
        url: "{{ _snapshot_download_url }}"
        dest: "{{ _snapshot_temp_dir.path }}/{{ _nox_bin }}"
      register: _download_artifact
      until: _download_artifact is succeeded
      retries: 5
      delay: 2

    - name: propagate nox snapshot binary
      become: true
      become_user: root
      run_once: false
      delegate_to: "{{ inventory_hostname }}"
      ansible.builtin.copy:
        src: "{{ _snapshot_temp_dir.path }}/{{ _nox_bin }}"
        dest: "{{ nox_dir }}/nox"
        owner: "{{ nox_user }}"
        group: "{{ nox_group }}"
        mode: 0o555
      notify: restart nox

  always:
    - name: remove temporary directory
      ansible.builtin.file:
        path: "{{ _snapshot_temp_dir.path }}"
        state: absent
      when: _snapshot_temp_dir.path is defined

- name: copy nox config
  ansible.builtin.template:
    src: "files/{{ fluence_project_dir }}/.fluence/configs/{{ fluence_instance_id }}_Config.toml"
    dest: "{{ nox_dir }}/Config.toml"
    owner: "{{ nox_user }}"
    group: "{{ nox_group }}"
    mode: 0o640
  notify: restart nox

- name: copy nox secret
  ansible.builtin.template:
    src: "files/{{ fluence_project_dir }}/.fluence/secrets/{{ fluence_instance_id }}.txt"
    dest: "{{ nox_dir }}/state/root_secret_key.ed25519"
    backup: true
    owner: "{{ nox_user }}"
    group: "{{ nox_group }}"
    mode: 0o600
  notify: restart nox

- name: create nox unit file
  ansible.builtin.copy:
    content: "{{ nox_unit_file }}"
    dest: "/etc/systemd/system/nox.service"
    owner: root
    group: root
    mode: 0o755

- name: enable noxes
  ansible.builtin.systemd:
    name: nox
    enabled: true
    daemon_reload: true
