- name: check that GITHUB_TOKEN is defined
  tags: always
  vars:
    github_token: "{{ lookup('env', 'GITHUB_TOKEN') }}"
  ansible.builtin.assert:
    that:
      - github_token is string
      - github_token | length
    quiet: true
  when: ccp_run_id | string | length

- name: check that tar is GNU type # noqa
  tags: always
  fluencelabs.provider.check_tar_type:

- name: check "fluence_instance_id" variable
  tags: always
  ansible.builtin.assert:
    that:
      - fluence_instance_id is string
      - fluence_instance_id | length
    quiet: true

- name: check "ccp_version" variable
  tags: always
  ansible.builtin.assert:
    that:
      - ccp_version is defined
      - ccp_version is string
      - ccp_version | length
      - ccp_version is regex(_semver_regex)
    quiet: true

- name: check "ccp_user" variable
  tags: always
  ansible.builtin.assert:
    that:
      - ccp_user is defined
      - ccp_user is string
      - ccp_user | length
    quiet: true

- name: check "ccp_group" variable
  tags: always
  ansible.builtin.assert:
    that:
      - ccp_group is defined
      - ccp_group is string
      - ccp_group | length
    quiet: true

- name: check "ccp_dir" variable
  tags: always
  ansible.builtin.assert:
    that:
      - ccp_dir is defined
      - ccp_dir is string
      - ccp_dir | length
    quiet: true

- name: check "ccp_unit_file" variable
  tags: always
  ansible.builtin.assert:
    that:
      - ccp_unit_file is defined
      - ccp_unit_file is string
      - ccp_unit_file | length
    quiet: true

- name: check "fluence_project_dir" variable
  tags: always
  ansible.builtin.assert:
    that:
      - fluence_project_dir is defined
      - fluence_project_dir is string
      - fluence_project_dir | length
    quiet: true

- name: gather stats about ccp configs
  tags: always
  become: false
  delegate_to: localhost
  stat:
    path: "files/{{ fluence_project_dir }}/.fluence/ccp-configs/{{ fluence_instance_id }}_Config.toml"
  register: _config_stat

- name: check if config file exists
  tags: always
  vars:
    _config_path: "files/{{ fluence_project_dir }}/.fluence/ccp-configs/{{ fluence_instance_id }}_Config.toml"
  debug:
    msg: "Checking existence of {{ fluence_instance_id }} config at {{ _config_path }}"
  failed_when: not _config_stat.stat.exists
